/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:

    static bool comp(Interval a, Interval b){
        return a.start < b.start;
    }
    vector<Interval> merge(vector<Interval> &intervals) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int l = intervals.size();
        vector<Interval> ret;
        if(l == 0){
            return ret;
        }
        sort(intervals.begin(), intervals.end(), Solution::comp);
        ret.push_back(intervals[0]);
        for(int i = 1; i < l; i++){
            if(intervals[i].start <= ret.back().end){
                ret.back().start = min(intervals[i].start, ret.back().start);
                ret.back().end = max(intervals[i].end, ret.back().end);
            }else{
                ret.push_back(intervals[i]);
            }
        }
        return ret;
    }
    
};
