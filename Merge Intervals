/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:

    static bool comp(Interval a, Interval b){
        return a.start <= b.start;
    }
    vector<Interval> merge(vector<Interval> &intervals) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int l = intervals.size();
        vector<Interval> ret;
        if(l == 0){
            return ret;
        }
        sort(intervals.begin(), intervals.end(), Solution::comp);
        int start = intervals[0].start;
        int end = intervals[0].end;
        for(int i = 1; i < l; i++){
            int ns = intervals[i].start;
            int ne = intervals[i].end;
            if(ns <= end){
                start = min(ns, start);
                end = max(ne, end);
            }else{
                Interval newi(start, end);
                ret.push_back(newi);
                start = ns;
                end = ne;
            }
        }
        Interval newi(start, end);
        ret.push_back(newi);
        return res;
    }
    
};
