class Solution {
public:
    struct hist{
        int x;
        int h;
    };
    int maximalRectangle(vector<vector<char> > &matrix) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int rows = matrix.size();
        if(!rows) return 0;
        int cols = matrix[0].size();
        if(!cols) return 0;
        vector<vector<int> > height(rows, vector<int>(cols));
        for(int j = 0; j < cols; j++){
            height[0][j] = matrix[0][j] == '1' ? 1: 0;
            for(int i = 1; i < rows; i++){
                height[i][j] = matrix[i][j] == '1' ? height[i-1][j] + 1 : 0;
            }
        }
        int L[cols];
        int R[rows];
        int maxR = 0;
        for(int i = 0; i < rows; i++){
            L[0] = 0;
            R[cols-1] = cols-1;
            for(int j = 1; j < cols; j++){
                if(height[i][j] > height[i][j-1])
                    L[j] = j;
                else{
                    int tmpj = L[j-1];
                    while(height[i][j] >= height[i][tmpj] && tmpj != 0){
                        tmpj = L[tmpj];
                    }
                    L[j] = height[i][j] >= height[i][tmpj] ? tmpj : tmpj + 1;
                }
            }
            for(int j = cols-2; j >=0; j--){
                if(height[i][j] > height[i][j+1])
                    R[j] = j;
                else{
                    int tmpj = R[j+1];
                    while(height[i][j] >= height[i][tmpj] && tmpj != cols-1){
                        tmpj = R[tmpj];
                    }
                    R[j] = height[i][j] >= height[i][tmpj] ? tmpj : tmpj + 1;
                }
            }
            
            for(int j = 0; j < cols-1; j++){
                maxR = max(maxR, (R[j] - L[j] + 1)*height[i][j]);
            }
        }
        return maxR;
    }
};
