class Solution {
public:
    int maxProfit(vector<int> &prices) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int res = 0;
        int max1[prices.size()];//max1[i] = index of max value of prices[0...i]
        int min2[prices.size()];//min2[i] = index of max value of  prices[i...prices.size()-1]
        int maxP1[prices.size()];//maxP1[i] = max profit of [0...i]
        int maxP2[prices.size()];//maxP2[i] = max profit of [i...prices.size()-1];
        for(int i = 0; i < prices.size(); i ++){
            if(i >= 2 ){
                if(prices[i] > max1[i-1]){
                    maxP1[i] = maxP1[i-1] + max1[i-1] - prices[i];
                }
            }else{
                maxP1[i] = getMax(prices, 0, i);
            }
            
            if(i == 0){
                maxP2[i] = getMax(prices, i, prices.size()-1);
            }else{
                if(prices[i] == 
                
            }
            //res = max(res, getMax(prices, 0, i) + getMax(prices, i, prices.size()-1));
        }
        
        return res;
    }
    int getMax(int flag, vector<int> &prices, int* &max1, int*&min2, int *&maxP1, int*&maxP2, int b, int e){
        int minDay = b;
        int maxDay = b;
        int maxProfit = 0;
        for(int i = b; i <= e; i ++){
            if(prices[i] < prices[minDay]){
                minDay = i;
            }
            int temp = prices[i] - prices[minDay];
            if(temp > maxProfit){
                maxProfit = temp;
                maxDay = i;
            }
        }
        if(flag == 0){
            max1[e] = maxDay;
        }else if(flag == 1){
            min2[b] = minDay;
        }
        return maxProfit;
    }
};
