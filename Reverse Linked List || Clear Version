/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverse(ListNode *start, int i){
        if(!start || i==0) return start;
        ListNode* cur = start;
        ListNode* n = start->next;
        while(cur && n){
            ListNode* nn = n->next;
            n->next = cur;
            
            cur = n;
            n = nn;
            i--;
            if(i == 0)
                return cur;
        }
        return cur;
    }
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ListNode* header = new ListNode(-1);
        header->next = head;
        ListNode* prev = header, *next;
        for(int i = 0; i < m-1; i++){
            prev = prev->next;
        }
        next = prev->next;
        for(int i = 0; i < n - m + 1; i++){
            next = next->next;
        }
        ListNode* cur = reverse(prev->next, n-m);
        prev->next->next = next;
        prev->next = cur;
        return header->next;
    }
};
