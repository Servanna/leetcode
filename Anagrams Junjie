class Solution {
public:
    vector<string> anagrams(vector<string> &strs) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        unordered_map<string, vector<string> > map;
        for(int i = 0; i < strs.size(); i ++){
            string s = strs[i];
            std::sort(s.begin(), s.end());
            if(map.count(s) == 0){
                vector<string> tmp;
                tmp.push_back(strs[i]);
                map.insert(pair<string, vector<string> >(s, tmp));
            }else{
                map[s].push_back(strs[i]);
            }
        }
        unordered_map<string, vector<string> >::iterator itr;
        vector<string> ret;
        for (itr = map.begin(); itr != map.end(); ++itr) {
            if(itr->second.size() > 1){
                for(int i = 0; i < itr->second.size(); i++)
                    ret.push_back(itr->second[i]);
            }
        }
        return ret;
    }
};
