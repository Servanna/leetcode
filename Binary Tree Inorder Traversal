
    /** 
     * Definition for binary tree 
     * struct TreeNode { 
     *     int val; 
     *     TreeNode *left; 
     *     TreeNode *right; 
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} 
     * }; 
     */  
    class Solution {  
    public:  
        vector<int> inorderTraversal(TreeNode *root) {  
            // Start typing your C/C++ solution below  
            // DO NOT write int main() function  
              
            stack<TreeNode *> nodes;  
            int i=0;  
            vector<int> res;  
            if (!root) {  
                return res;  
            }  
              
            TreeNode *temp=root;   
            TreeNode *pre=NULL;  
            int f=0;  
            nodes.push(root);  
            while (nodes.size()!=0) {  
                if(f==1) {  
                    temp=pre->right;  
                    f=0;  
                }  
                while (temp->left != NULL) {  
                    nodes.push(temp->left);  
                    temp=temp->left;  
                }  
                TreeNode *temp=nodes.top();  
                nodes.pop();  
                res.push_back(temp->val);  
                i++;  
                if (temp->right!=NULL) {  
                    nodes.push(temp->right);  
                    pre=temp;  
                    f=1;  
                    temp=temp->right;  
                }  
            }  
            return res;  
        }  
    }; 
